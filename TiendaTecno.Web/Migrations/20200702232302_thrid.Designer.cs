// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TiendaTecno.Web.Data;

namespace TiendaTecno.Web.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20200702232302_thrid")]
    partial class thrid
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("TiendaTecno.Web.Data.Entities.Caracteristicas.Almacenamiento", b =>
                {
                    b.Property<int>("IdAlmacenamiento")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Tamaño");

                    b.HasKey("IdAlmacenamiento");

                    b.ToTable("Almacenamientos");
                });

            modelBuilder.Entity("TiendaTecno.Web.Data.Entities.Caracteristicas.MemoriaRam", b =>
                {
                    b.Property<int>("IdMemoriaRam")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RAM");

                    b.HasKey("IdMemoriaRam");

                    b.ToTable("MemoriasRam");
                });

            modelBuilder.Entity("TiendaTecno.Web.Data.Entities.Caracteristicas.Procesador", b =>
                {
                    b.Property<int>("IdProcesador")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Cores");

                    b.Property<string>("Nombre");

                    b.Property<string>("UrlLogo");

                    b.HasKey("IdProcesador");

                    b.ToTable("Procesadores");
                });

            modelBuilder.Entity("TiendaTecno.Web.Data.Entities.Categoria", b =>
                {
                    b.Property<int>("IdCategoria")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Categorias");

                    b.HasKey("IdCategoria");

                    b.ToTable("Categorias");
                });

            modelBuilder.Entity("TiendaTecno.Web.Data.Entities.Especificacion", b =>
                {
                    b.Property<int>("IdEspecificaciones")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Estado");

                    b.Property<bool>("Expandible");

                    b.Property<int>("IdAlmacenamiento");

                    b.Property<int>("IdMarca");

                    b.Property<int>("IdMemoriaRam");

                    b.Property<int>("IdPantalla");

                    b.Property<int>("IdProcesador");

                    b.Property<int>("IdSistemaOperativo");

                    b.Property<string>("Referencia");

                    b.HasKey("IdEspecificaciones");

                    b.HasIndex("IdAlmacenamiento");

                    b.HasIndex("IdMarca");

                    b.HasIndex("IdMemoriaRam");

                    b.HasIndex("IdPantalla");

                    b.HasIndex("IdProcesador");

                    b.HasIndex("IdSistemaOperativo");

                    b.ToTable("Especificaciones");
                });

            modelBuilder.Entity("TiendaTecno.Web.Data.Entities.Especificaciones.Marca", b =>
                {
                    b.Property<int>("IdMarca")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nombre");

                    b.Property<string>("UrlLogo");

                    b.HasKey("IdMarca");

                    b.ToTable("Marcas");
                });

            modelBuilder.Entity("TiendaTecno.Web.Data.Entities.Especificaciones.Pantalla", b =>
                {
                    b.Property<int>("IdPantalla")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Densidad");

                    b.Property<string>("Diagonal");

                    b.Property<int>("IdTipoPantalla");

                    b.Property<string>("Resolucion");

                    b.HasKey("IdPantalla");

                    b.HasIndex("IdTipoPantalla");

                    b.ToTable("Pantallas");
                });

            modelBuilder.Entity("TiendaTecno.Web.Data.Entities.Especificaciones.SistemaOperativo", b =>
                {
                    b.Property<int>("IdSistemaOperativo")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nombre");

                    b.Property<string>("UrlLogo");

                    b.HasKey("IdSistemaOperativo");

                    b.ToTable("SistemasOperativos");
                });

            modelBuilder.Entity("TiendaTecno.Web.Data.Entities.Especificaciones.TipoPantalla", b =>
                {
                    b.Property<int>("IdTipoPantalla")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Tipo");

                    b.HasKey("IdTipoPantalla");

                    b.ToTable("TiposPantallas");
                });

            modelBuilder.Entity("TiendaTecno.Web.Data.Entities.Producto", b =>
                {
                    b.Property<int>("IdProducto")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdCategoria");

                    b.Property<int>("IdEspecificaciones");

                    b.Property<bool>("SeFinancia");

                    b.HasKey("IdProducto");

                    b.HasIndex("IdCategoria");

                    b.HasIndex("IdEspecificaciones");

                    b.ToTable("Productos");
                });

            modelBuilder.Entity("TiendaTecno.Web.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TiendaTecno.Web.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TiendaTecno.Web.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TiendaTecno.Web.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TiendaTecno.Web.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TiendaTecno.Web.Data.Entities.Especificacion", b =>
                {
                    b.HasOne("TiendaTecno.Web.Data.Entities.Caracteristicas.Almacenamiento", "Almacenamiento")
                        .WithMany()
                        .HasForeignKey("IdAlmacenamiento")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TiendaTecno.Web.Data.Entities.Especificaciones.Marca", "Marca")
                        .WithMany()
                        .HasForeignKey("IdMarca")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TiendaTecno.Web.Data.Entities.Caracteristicas.MemoriaRam", "MemoriaRam")
                        .WithMany()
                        .HasForeignKey("IdMemoriaRam")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TiendaTecno.Web.Data.Entities.Especificaciones.Pantalla", "Pantalla")
                        .WithMany()
                        .HasForeignKey("IdPantalla")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TiendaTecno.Web.Data.Entities.Caracteristicas.Procesador", "Procesador")
                        .WithMany()
                        .HasForeignKey("IdProcesador")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TiendaTecno.Web.Data.Entities.Especificaciones.SistemaOperativo", "SistemaOperativo")
                        .WithMany()
                        .HasForeignKey("IdSistemaOperativo")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TiendaTecno.Web.Data.Entities.Especificaciones.Pantalla", b =>
                {
                    b.HasOne("TiendaTecno.Web.Data.Entities.Especificaciones.TipoPantalla", "TipoPantalla")
                        .WithMany()
                        .HasForeignKey("IdTipoPantalla")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TiendaTecno.Web.Data.Entities.Producto", b =>
                {
                    b.HasOne("TiendaTecno.Web.Data.Entities.Categoria", "Categoria")
                        .WithMany()
                        .HasForeignKey("IdCategoria")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TiendaTecno.Web.Data.Entities.Especificacion", "Especificacion")
                        .WithMany()
                        .HasForeignKey("IdEspecificaciones")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
